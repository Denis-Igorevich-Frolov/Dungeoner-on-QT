/**********************************************************************
 *Данный класс является структурой для всех статов кроме магической
 *защиты с реализацией геттеров и сеттеров с ограничителями.
 **********************************************************************/

#ifndef STAT_H
#define STAT_H

#include "Person/Stat/bonus.h"

#include <QVector>

class Stat
{
public:
    /*Разные группы статов имеют разные максимальные значения. Так для первичных навыков -
     *это 999999,а для вторичных - 9999999. Чтобы корректно работали ограничители на
     *сеттерах это максимальное значение задаётся при инициализации*/
    Stat(int maximum);
    ~Stat();

    int getValue() const;
    void setValue(int newValue);

    void addBonus(Bonus* bonus);

    /*!!!УСТАРЕЛОЕ, НО РАБОЧЕЕ, ПРОСТО БОЛЕЕ НИГДЕ НЕ ИСПОЛЬЗУЕТСЯ, ХОТЬ И МОЖЕТ В ПОСЛЕДСТВИИ ПОНАДОБИТСЯ!!!
     *!!!ТЕПЕРЬ УДАЛЕНИЕ БОНУСА ПРОИЗВОДИТСЯ В КЛАССЕ Person, А ЗАТЕМ ЗДЕСЬ ПЕРЕИНИЦИАЛИЗИРУЕТСЯ В reinitializationOfBonuses!!!
     *
     *Удаление бонуса. В метод передаётся указатель на бонус, который должен быть удалён. При этом
     *удаляется первый подошедший с конца бонус, а не конкретно тот, который инициировал удаление.
     *Если метод не смог обнаружить переданный на удаление бонус, он выводит предупреждение и
     *возвращает false, после чего следует запросить полный перерасчёт бонусов.*/
//    bool removeBonus(Bonus* bonus);

    /*Пререинициализация бонусов статов. Так как удаление бонусов производится в классе
     *Person, здесь требуется просто переинициализация вектором бонусов, хранящемся там.*/
    void reinitializationOfBonuses(QVector<Bonus *> bonuses);

    int getFinalValue() const;

    int getProgressBarCurrentValue() const;
    void setProgressBarCurrentValue(int newProgressBarCurrentValue);

private:
    int value = 0;
    //Значение с учётом всех бонусов
    int finalValue = 0;
    //Текущее значение прогрессбара. Используется только в статах с прогрессбаром.
    int progressBarCurrentValue = 0;

    //Максимальное значение стата
    int maximum = 0;

    QVector<Bonus*> bonuses;

    //Вычисление финального максимального значения стата с учётом всех бонусов
    void calculateFinalValue();
};

#endif // STAT_H
