/***********************************************************************************
 *Данный класс является всплывающей подсказкой с рамкой. Контент подсказки
 *передаётся в виде вектора лейблов. Сама подсказка имеет focusPolicy - NoFocus,
 *чтобы не перекрывать собой вызов ивентов.
 ***********************************************************************************/

#ifndef TOOLTIP_H
#define TOOLTIP_H

#include "qboxlayout.h"
#include "qlabel.h"

#include <QWidget>

namespace Ui {
class Tooltip;
}

class Tooltip : public QWidget
{
    Q_OBJECT

public:
    explicit Tooltip(QWidget *parent = nullptr);
    ~Tooltip();

    //Установка содержимого подсказки
    void setContent(QVector<QLabel*> content);

    /*Этот размер будет прибавлен к размеру виджета, содавая невидимую рамку,
     *обрамляющую виджет подсказки со всех сторон. На данный момент этот
     *размер - 30, соответственно получается рамка по 15 дополнительных
     *пикселей с каждой стороны.
     *
     *Так как подсказка движется за курсором возникает проблема того, что
     *при хоть немного быстром сдвиге реальное положение виджета смещается
     *быстрее, чем оно отрисовывается. Следовательно сам виджет сдвигается,
     *а его отрисовка не поспевает за сдвигом, оставаясь чуть за границами
     *и усекается из-за неотрисовки эллементов виджета за его задаными
     *границами. Это почти незаметно, но из-за тонкой рамки усечение
     *становится очевидным.
     *
     *Для того чтобы этого избежать и создаётся эта невидемая рамка, раздвигающая
     *границы виджета, сохраняя контент целым. В принципе рамку можко сделать
     *и побольше, если это будет нужно. Главное не забывать сдвигать виджет
     *подсказки в классе окна на половину invisibleFrame. Для этого переменная
     *и является публичной.*/
    QSize invisibleFrame = QSize(30, 30);

private:
    Ui::Tooltip *ui;

    /*Переопределённая виртуальная функция класса QWidget. Во время этого эвента происходит
     *подгонка всех графических элементов под размер виджета с учётом невидимой рамки.*/
    void resizeEvent(QResizeEvent* event) override;

    QVBoxLayout* layout = new QVBoxLayout;
};

#endif // TOOLTIP_H
